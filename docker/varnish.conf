vcl 4.0;
# Default backend definition. Set this to point to your content server.

backend default {
    .host = "www";
    .port = "80";
    .first_byte_timeout = 300s;
    .between_bytes_timeout = 300s;
}


sub vcl_recv {
    # Here we filter out everything in the signature folder, this folder is used for the Calibrate mail signature
    if (req.url ~ "^/signature$" ||
        req.url ~ "^/signature/.*$") {
           return (pass);
    }

    if (req.method == "GET" && req.url == "/varnish-status") { return(synth(200, "OK")); }
    if (req.url == "/autodiscover/autodiscover.xml") {return (synth(400, "Not found."));}

    set req.backend_hint = default;

    # Check the incoming request type is "PURGE", not "GET" or "POST"
    if (req.method == "PURGE") {
      return (purge);
    }

    #if ( req.http.host !~ "^www\." ) {
    #    return (synth(752, ""));
    #}

    if (req.http.X-Real-IP) {
        set req.http.X-Forwarded-For = req.http.X-Real-IP;
    } else {
        set req.http.X-Forwarded-For = client.ip;
    }

    # Return (pass) instructs Varnish not to cache the request
    # when the condition is met.
    ## ADMIN PAGES ##
    # Here we filter out all URLs containing Drupal administrative sections
    if (req.url ~ "^/status\.php$" ||
        req.url ~ "^/update\.php$" ||
        req.url ~ "^/admin$" ||
        req.url ~ "^/admin/.*$" ||
        req.url ~ "^/user$" ||
        req.url ~ "^/user/.*$" ||
        req.url ~ "^/flag/.*$" ||
        req.url ~ "^.*/ajax/.*$" ||
        req.url ~ "^.*/ahah/.*$" ||
        req.url ~ "^/civicrm$" ||
        req.url ~ "^/civicrm/.*$") {
            return (pass);
     }
     # Stop inspecting civicrm POST request. Just stream the bytes straight to the backend.
     if (req.method == "POST" && req.url ~ "^/civicrm/.*$") {
        return (pipe);
     }
    ## BACKUP AND MIGRATE MODULE ##
    # Backup and Migrate is a very popular Drupal module that needs to be excluded
    # It won't work with Varnish
    if (req.url ~ "^/admin/content/backup_migrate/export") {
        return (pipe);
    }
    ## COOKIES ##
    # Remove cookies for stylesheets, scripts, and images used throughout the site.
    # Removing cookies will allow Varnish to cache those files.
    if (req.url ~ "(?i)\.(css|js|jpg|jpeg|gif|png|ico|svg|woff)(\?.*)?$") {
        unset req.http.Cookie;
    }
    # Remove all cookies that are not necessary for Drupal to work properly.
    # Since it would be cumbersome to REMOVE certain cookies, we specify
    # which ones are of interest to us, and remove all others. In this particular
    # case we leave SESS, SSESS and NO_CACHE cookies used by Drupal's administrative
    # interface. Cookies in cookie header are delimited with ";", so when there are
    # many cookies, the header looks like "Cookie1=value1; Cookie2=value2; Cookie3..."
    # and so on. That allows us to work with ";" to split cookies into individual
    # ones.
    #
    # The method for filtering unnecessary cookies has been adopted from:
    # https://fourkitchens.atlassian.net/wiki/display/TECH/Configure+Varnish+3+for+Drupal+7
    if (req.http.Cookie) {
        # 1. We add ; to the beginning of cookie header
        set req.http.Cookie = ";" + req.http.Cookie;
        # 2. We remove spaces following each occurence of ";". After this operation
        # all cookies are delimited with no spaces.
        set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
        # 3. We replace ";" INTO "; " (adding the space we have previously removed) in cookies
        # named SESS..., SSESS... and NO_CACHE. After this operation those cookies will be
        # easy to differentiate from the others, because those will be the only one with space
        # after ";"
        set req.http.Cookie = regsuball(req.http.Cookie, ";(SESS[a-z0-9]+|SSESS[a-z0-9]+|NO_CACHE)=", "; \1=");
        # 4. We remove all cookies with no space after ";", so basically we remove all cookies other
        # than those above.
        set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
        # 5. We strip leading and trailing whitespace and semicolons.
        set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");
        # If there are no cookies after our striping procedure, we remove the header altogether,
        # thus allowing Varnish to cache this page
        if (req.http.Cookie == "") {
            unset req.http.Cookie;
        }
        # if any of our cookies of interest are still there, we disable caching and pass the request
        # straight to Apache and Drupal
        else {
            return (pass);
        }
    }
    if (req.http.Authorization || req.http.Cookie) {
        # Not cacheable by default
        return (pass);
    }
}

sub vcl_backend_response {

    #unset beresp.http.Server;
    #unset beresp.http.X-Powered-By;
    #unset beresp.http.X-Generator;
    #set beresp.http.X-Cache = server.hostname;
    #set beresp.http.X-Hosted-By = "https://www.calibrate.be";

    # Remove cookies for stylesheets, scripts and images used throughout the site.
    # Removing cookies will allow Varnish to cache those files. It is uncommon for
    # static files to contain cookies, but it is possible for files generated
    # dynamically by Drupal. Those cookies are unnecessary, but could prevent files
    # from being cached.
    if (bereq.url ~ "(?i)\.(css|js|jpg|jpeg|gif|png|ico|svg|woff)(\?.*)?$") {
        unset beresp.http.set-cookie;
    }
}

sub vcl_synth {
    if (resp.status == 750) {
        set resp.status = 301;
        set resp.http.Location = "https://" + req.http.host + req.url;
        return(deliver);
    }
    if (resp.status == 751) {
        set resp.status = 301;
		if ( req.http.X-Forwarded-Proto !~ "(?i)https" ) {
			set resp.http.Location = regsub(req.http.host, "^www\.(.*)", "http://\1");
		}else{
			set resp.http.Location = regsub(req.http.host, "^www\.(.*)", "https://\1");
		}
        return(deliver);
    }
    if (resp.status == 752) {
        set resp.status = 301;
		if ( req.http.X-Forwarded-Proto !~ "(?i)https" ) {
			set resp.http.Location = "http://www." + req.http.host + req.url;
		}else{
			set resp.http.Location = "https://www." + req.http.host + req.url;
		}

        return(deliver);
    }
}